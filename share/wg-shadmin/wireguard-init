#!/bin/sh
#--------------------------------------------------------------------------------+
# BSD 3-Clause License
#
# Copyright (c) 2022, Alonso CÃ¡rdenas (acardenas@bsd-peru.org)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

tui::init() {
        local _menu

        _menu=$(${DIALOG_BIN} --nocancel --backtitle "Wireguard administration tool" \
                --title "Wireguard administration tool" \
                --menu "Select one option:" 12 60 5 \
                        1 "Server management" \
                        2 "Groups management" \
                        3 "Clients management" \
                        4 "Exit" \
        3>&1 1>&2 2>&3)

        case ${_menu} in
                1)      tui::server
                        ;;
                2)      tui::group
                        ;;
                3)      tui::client
                        ;;
                4)      echo "Bye"
                        exit
                        ;;
        esac

        tui::init
}

tui::server() {
        local _server_menu

        _server_menu=$(${DIALOG_BIN} --nocancel --backtitle "Wireguard administration tool" \
                --title "Server management" \
                --menu "Select one option:" 12 60 5  \
                        1 "Edit configuration" \
                        2 "Apply configuration" \
                        3 "Backup configuration files" \
                        4 "Exit" \
        3>&1 1>&2 2>&3)

        case ${_server_menu} in
                1)      tui::server::edit
			tui::server
                        ;;
		2)	tui::server::apply
			tui::server
			;;
		3)	tui::server::backup
			tui::server
			;;
		4)	tui::init
			;;
        esac
}

tui::server::edit() {
	local _client_output
	local _server_output
	local _server_ip="$1"
	local _server_port="$2"
	local _server_interface="$3"
	local _server_subnet="$4"
	local _server_subnet_ip="$5"
	local _client_allowedips="$6"
	local _client_dns="$7"
	local _check
	local _check_error=0
	local _msgcheck="\n"
	local _continue=0

	if [ -e ${ETCPATH}/wg-shadmin.conf ]; then
	        _server_ip=$(grep "wireguard_server_endpoint=" ${ETCPATH}/wg-shadmin.conf | cut -d '"' -f2)
	        _server_port=$(grep "wireguard_port=" ${ETCPATH}/wg-shadmin.conf | cut -d '"' -f2)
	        _server_interface=$(grep "wireguard_interface=" ${ETCPATH}/wg-shadmin.conf | cut -d '"' -f2)
	        _server_subnet_ip=$(grep "wireguard_interface_ip=" ${ETCPATH}/wg-shadmin.conf | cut -d '"' -f2)
	        _server_subnet=$(grep "wireguard_network=" ${ETCPATH}/wg-shadmin.conf | cut -d '"' -f2)
		_client_allowedips=$(grep "wireguard_allowedips=" ${ETCPATH}/wg-shadmin.conf | cut -d '"' -f2)
		_client_dns=$(grep "wireguard_dns=" ${ETCPATH}/wg-shadmin.conf | cut -d '"' -f2)
	fi

	while true
	do
		_server_output=$(${DIALOG_BIN} --ok-label "Next" \
			--cancel-label "Cancel" \
			--backtitle "Wireguard administration tool" \
			--title "Edit configuration" \
			--form "Create a new configuration" 15 60 0 \
				"Server IP/Domain endpoint:" 1 1 "${_server_ip}" 1 28 28 80 \
				"Server port:" 2 1 "${_server_port}" 2 28 6 5 \
				"Server interface:" 3 1 "${_server_interface}" 3 28 5 4 \
				"Server network subnet:" 4 1 "${_server_subnet}" 4 28 19 18 \
				"Server subnet IP:" 5 1 "${_server_subnet_ip}" 5 28 16 15 \
		3>&1 1>&2 2>&3)

	        if [ "$?" -eq "0" ]; then
			_server_ip=$(echo "${_server_output}" | sed -n 1p)
			_server_port=$(echo "${_server_output}" | sed -n 2p)
			_server_interface=$(echo "${_server_output}" | sed -n 3p)
			_server_subnet=$(echo "${_server_output}" | sed -n 4p)
			_server_subnet_ip=$(echo "${_server_output}" | sed -n 5p)

			_check=$(util::validate::ip::format "${_server_ip}")

			if [ ${_check} -eq 1 ]; then
				_msgcheck=${_msgcheck}"Server IP \"${_server_ip}\" address is not valid\n\n"
				_check_error=1
			fi

			_check=$(util::validate::ip::format "${_server_subnet_ip}")

			if [ ${_check} -eq 1 ]; then
				_msgcheck=${_msgcheck}"Server subnet IP \"${_server_subnet_ip}\" address is not valid\n\n"
				_check_error=1
			fi

			_check=$(util::check::host "${_server_subnet}" "${_server_subnet_ip}")

			if [ ${_check} -eq 1 ]; then
				_msgcheck=${_msgcheck}"Server subnet IP \"${_server_subnet_ip}\" is not part of subnet \"${_server_subnet}\" \n\n"
				_check_error=1
			fi

			if [ ${_check_error} -eq 1 ]; then
				tui::infobox "Server management :: Error" "${_msgcheck}" "4"
			else
				break;
			fi
		else
			return 1
		fi
	done

	while true
	do
		_check_error=0
		_msgcheck="\n"

		_client_output=$(${DIALOG_BIN} --ok-label "Next" \
			--cancel-label "Cancel" \
			--backtitle "Wireguard administration tool" \
			--title "Edit configuration" \
			--form "Client option configuration" 10 60 0 \
				"Client allowed IPs:" 1 1 "${_client_allowedips}" 1 25 25 80 \
				"Client DNS IP:" 2 1 "${_client_dns}" 2 25 25 80 \
		3>&1 1>&2 2>&3)

		if [ "$?" -eq "0" ]; then
			_client_allowedips=$(echo "${_client_output}" | sed -n 1p)
			_client_dns=$(echo "${_client_output}" | sed -n 2p)

			if [ -z ${_client_allowedips} ]; then
				_msgcheck=${_msgcheck}"Allowed IPs must not be empty\n\n"
	                        _check_error=1
			fi

			if [ -z ${_client_dns}]; then
				_msgcheck=${_msgcheck}"DNS must not be empty\n\n"
	                        _check_error=1
			fi

			if [ ${_check_error} -eq 1 ]; then
				tui::infobox "Server management :: Error" "${_msgcheck}" "4"
			else
				break;
	                fi

		else
			return 1
		fi
	done

	if [ ${_continue} = 0 ]; then
		server::init::config "${_server_ip}" "${_server_port}" "${_server_interface}" "${_server_subnet}" "${_server_subnet_ip}"
		client::init::config "${_client_allowedips}" "${_client_dns}"

		tui::yesno "Server management" "Do you want generate server public and private keys?"

	        if [ "$?" -eq "0" ]; then
			server::init::config::keys
	        fi

	        tui::infobox "Server management" "Changes were saved" "2"
	fi

	return 0
}

tui::server::apply() {
	server::generate::config "${ETCPATH}/wg-shadmin-clients.conf"

	tui::infobox "Server management" "Server configuration file was generated" "2"

	tui::yesno "Server management" "Do you want apply new server configuration file?"

	if [ "$?" -eq "0" ]; then
		util::apply::config

		tui::infobox "Server management" "Server configuration was applied correctly" "2"

		return 0
	else
		return 1
	fi
}

tui::server::backup() {
	local _date

	_date=$(date "+%Y%m%d%H%M")

	tui::yesno "Server management" "Do you want to backup configuration files?"

	if [ "$?" -eq "0" ]; then
		util::make::backup "${_date}"

		tui::infobox "Server management" "Backup ${_date} was created correctly" "2"
                return 0
	else
		return 1
	fi
}

tui::group() {
        local _group_menu

        _group_menu=$(${DIALOG_BIN} --nocancel --backtitle "Wireguard administration tool" \
                --title "Group management" \
                --menu "Select one option:" 12 60 5 \
                        1 "Add group" \
                        2 "Edit group" \
                        3 "Exit" \
        3>&1 1>&2 2>&3)

        case ${_group_menu} in
                1)      tui::group::add
			tui::group
                        ;;
                2)      tui::group::edit
			tui::group
                        ;;
                3)      tui::init
                        ;;
        esac

        echo ${_group_menu}
}

tui::group::add() {
	local _group_output
	local _n

	_n=$(group::generate::id "${ETCPATH}/wg-shadmin-groups.conf")

	while true
	do
		_group_output=$(${DIALOG_BIN} --title "Add group" --inputbox "Put group-${_n} name:" 10 60 3>&1 1>&2 2>&3)

		if [ "$?" -eq "1" ]; then
			return 1
		fi

		if [ -n "${_group_output}" ]; then
			break;
		else
			tui::infobox "Group management" "Group name can not be empty" "2"
		fi
	done

	tui::yesno "Group management" "Do you want add ${_group_output} group?"

	if [ "$?" -eq "0" ]; then
		group::save "group-${_n}" "${_group_output}"

		tui::infobox "Group management" "New group ${group_output} was saved" "2"

		return 0
	fi
}

tui::group::edit() {
        local _group_file="$1"
        local _group_name
        local _group_desc
	local _group_old_desc
        local _group
        local _group_list=""
        local _group_output

        _group_list=$(group::list "${ETCPATH}/wg-shadmin-groups.conf")

        _group_output=$(echo ${_group_list} | xargs ${DIALOG_BIN} --backtitle "Wireguard administration tool" \
                --title "Group management" \
                --radiolist "Select one group:" 15 60 10 \
        3>&1 1>&2 2>&3)

        if [ "$?" -eq "1" ]; then
                return 1
        fi

	_group_old_desc=$(util::config::get "${ETCPATH}/wg-shadmin-groups.conf" "${_group_output}")
	_group_desc=$(${DIALOG_BIN} --nocancel --title "Edit group ${_group_output}" --inputbox "Put new group description:" 10 50 "${_group_old_desc}" 3>&1 1>&2 2>&3)

	util::config::set "${ETCPATH}/wg-shadmin-groups.conf" "${_group_output}" "${_group_desc}"

	tui::infobox "Group configuration" "${_group_output} change was saved" "2"

	return 0
}


tui::client() {
        local _client_menu

        _client_menu=$(${DIALOG_BIN} --nocancel --backtitle "Wireguard administration tool" \
                --title "Client management" \
                --menu "Select one option:" 15 60 10 \
                        1 "Add client" \
                        2 "Edit client" \
                        3 "Enable/disable client" \
                        4 "Generate client configuration file" \
                        5 "Generate massive client configuration files" \
                        6 "Generate client qr code" \
                        7 "View clients" \
                        8 "Exit" \
        3>&1 1>&2 2>&3)

        case ${_client_menu} in
                1)      tui::client::add
			tui::client
			;;
                2)      tui::client::edit
			tui::client
                        ;;
                3)      tui::client::activate
			tui::client
                        ;;
                4)      tui::client::generate::file
			tui::client
                        ;;
                5)      tui::client::generate::files
			tui::client
                        ;;
                6)      tui::client::generate::qrcode
			tui::client
                        ;;
                7)      tui::client::view
			tui::client
                        ;;
                8)      tui::init
                        ;;
        esac

        echo ${_client_menu}
}

tui::client::add() {
	local _client_output=""
	local _client_ip
	local _client_fullname
	local _client_keepalive
	local _client_preshared
	local _client_active
	local _client_group
	local _client_peer_name
	local _server_subnet
	local _group_name
	local _group_desc
	local _group
	local _group_list=""
	local _check=0
	local _n

	_client_ip=$(client::generate::ip "${ETCPATH}/wg-shadmin-clients.conf")

	while true
	do
		_client_ip=$(${DIALOG_BIN} --title "Add client" --inputbox "Put client ip address:" 10 60 "${_client_ip}" 3>&1 1>&2 2>&3)

		if [ "$?" -eq "1" ]; then
			return 1
		fi

                _client_ip=$(util::validate::ip::format "${_client_ip}")
		_server_subnet=$(util::config::get "${ETCPATH}/wg-shadmin.conf" "wireguard_network")
		_check=$(util::config::get::exists "${ETCPATH}/wg-shadmin-clients.conf" "${_client_ip}")

		if [ ${_client_ip} -eq 1 ] || [ ${_check} -eq 0 ]; then
			tui::infobox "Add client :: Error" "IP address is not valid or already is used by another peer" "3"
		else
			_check=$(util::check::host "${_server_subnet}" "${_client_ip}")

			if [ ${_check} -eq 1 ]; then
				tui::infobox "Add client :: Error" "Server subnet IP ${_client_ip} is not part of subnet ${_server_subnet} \n\n" "3"
			else
				break;
			fi
		fi
	done

	while true
	do
	        _client_fullname=$(${DIALOG_BIN} --title "Add client" --inputbox "Put user full name:" 10 60 3>&1 1>&2 2>&3)

		if [ "$?" -eq "1" ]; then
			return 1
		fi

		if [ -n ${_group_output} ]; then
			break;
		else
			tui::infobox "Add client" "User full name can not be empty" "2"
		fi
	done

        tui::yesno "Add client" "Do you want add Keep Alive option?"

        if [ "$?" -eq "0" ]; then
                _client_keepalive=25
        else
                _client_keepalive=0
        fi

        tui::yesno "Add client" "Do you want generate a preshared key?"

        if [ "$?" -eq "0" ]; then
                _client_preshared=YES
        else
                _client_preshared=NO
        fi

	tui::yesno "Add client" "Do you want activate this peer by default?"

	if [ "$?" -eq "0" ]; then
		_client_active=YES
        else
		_client_active=NO
        fi

        _group_list=$(group::list "${ETCPATH}/wg-shadmin-groups.conf")

	while true
	do
		_client_group=$(echo ${_group_list} | xargs ${DIALOG_BIN} --backtitle "Wireguard administration tool" \
			--title "Add client" \
			--radiolist "Select one group:" 15 60 10 \
		3>&1 1>&2 2>&3)

		if [ -z ${_client_group} ]; then
			tui::infobox "Add client" "You must select a group" "2"
		else
			break;
		fi
	done

	_client_output=$(${DIALOG_BIN} --ok-label "Create" \
		--cancel-label "Cancel" \
		--backtitle "Wireguard administration tool" \
		--title "Add client" \
		--mixedform "Create a new configuration" 15 60 0 \
			"Client IP:" 1 1 "${_client_ip}" 1 25 16 15 2 \
			"Client active:" 2 1 "${_client_active}" 2 25 5 4 2 \
			"Client fullname:" 3 1 "${_client_fullname}" 3 25 23 22 0 \
			"Client keepalive:" 4 1 "${_client_keepalive}" 4 25 5 4 2 \
			"Client preshared:" 5 1 "${_client_preshared}" 5 25 5 4 2 \
			"Client group:" 6 1 "${_client_group}" 6 25 23 22 2 \
		3>&1 1>&2 2>&3)

	if [ "$?" -eq "0" ]; then
		_client_ip=$(echo "${_client_output}" | sed -n 1p)
		_client_fullname=$(echo "${_client_output}" | sed -n 3p)
		_client_keepalive=$(echo "${_client_output}" | sed -n 4p)
		_client_group=$(echo "${_client_output}" | sed -n 6p)

		client::save "${_client_ip}" "${_client_active}" "${_client_preshared}" "${_client_keepalive}" "${_client_fullname}" "${_client_group}"

		tui::infobox "Add client" "New peer was added" "2"
		return 0
	else
                return 1
	fi
}

tui::client::edit() {
        local _client_output=""
        local _client_ip
        local _client_fullname
        local _client_keepalive
        local _client_preshared
	local _client_active
        local _client_group
        local _client_peer
        local _group_name
        local _group_desc
        local _group
        local _group_list=""

	_client_list=$(client::list "${ETCPATH}/wg-shadmin-clients.conf")

        while true
        do
                _client_peer=$(echo ${_client_list} | xargs ${DIALOG_BIN} --backtitle "Wireguard administration tool" \
                                --title "Update client" \
                                --radiolist "Select one peer:" 15 60 10 \
                                3>&1 1>&2 2>&3)

                if [ "$?" -eq "1" ]; then
                        return 1
                fi

                if [ -z ${_client_peer} ]; then
                        tui::infobox "Update client" "You must select a peer" "2"
                else
			_client_ip=$(grep "${_client_peer}_ip=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_active=$(grep "${_client_peer}_active=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_privkey=$(grep "${_client_peer}_privkey=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_preshared=$(grep "${_client_peer}_preshared=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_keepalive=$(grep "${_client_peer}_keepalive=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_fullname=$(grep "${_client_peer}_fullname=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_group=$(grep "${_client_peer}_group=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
                        break;
                fi
        done

        while true
        do
                _client_fullname=$(${DIALOG_BIN} --title "Update client" --inputbox "Put user full name:" 10 60 "${_client_fullname}" 3>&1 1>&2 2>&3)

                if [ "$?" -eq "1" ]; then
                        return 1
                fi

                if [ -n ${_group_output} ]; then
                        break;
                else
                        tui::infobox "Update client" "User full name can not be empty" "2"
                fi
        done

        tui::yesno "Update client" "Do you want add Keep Alive option?"

        if [ "$?" -eq "0" ]; then
                _client_keepalive=25
        else
                _client_keepalive=0
        fi

	tui::yesno "Update client" "Do you want generate a new private key?"

	if [ "$?" -eq "0" ]; then
                _client_privkey=YES
        else
                _client_privkey=NO
        fi

        tui::yesno "Update client" "Do you want generate a preshared key?"

        if [ "$?" -eq "0" ]; then
                _client_preshared=YES
        else
                _client_preshared=NO
        fi

	tui::yesno "Add client" "Do you want activate this peer by default?"

	if [ "$?" -eq "0" ]; then
		_client_active=YES
        else
		_client_active=NO
        fi

        _group_list=$(group::list "${ETCPATH}/wg-shadmin-groups.conf")

        while true
        do
                _client_group=$(echo ${_group_list} | xargs ${DIALOG_BIN} --backtitle "Wireguard administration tool" \
                                --title "Update client" \
                                --radiolist "Select one group (current: ${_client_group}):" 15 60 10 \
                                3>&1 1>&2 2>&3)

		if [ "$?" -eq "1" ]; then
			return 1
		fi

                if [ -z ${_client_group} ]; then
                        tui::infobox "Update client" "You must select a group" "2"
                else
                        break;
                fi
        done

        _client_output=$(${DIALOG_BIN} --ok-label "Update" \
                        --cancel-label "Cancel" \
                        --backtitle "Wireguard administration tool" \
                        --title "Update client" \
                        --mixedform "Update configuration" 15 60 0 \
                                        "Client IP:" 1 1 "${_client_ip}" 1 25 16 15 2 \
                                        "Client active:" 2 1 "${_client_active}" 2 25 16 15 2 \
                                        "Client fullname:" 3 1 "${_client_fullname}" 3 25 23 22 0 \
                                        "Client keepalive:" 4 1 "${_client_keepalive}" 4 25 5 4 2 \
                                        "Client privkey:" 5 1 "${_client_privkey}" 5 25 5 4 2 \
                                        "Client preshared:" 6 1 "${_client_preshared}" 6 25 5 4 2 \
                                        "Client group:" 7 1 "${_client_group}" 7 25 23 22 2 \
                        3>&1 1>&2 2>&3)

        if [ "$?" -eq "0" ]; then
                _client_fullname=$(echo "${_client_output}" | sed -n 3p)
                _client_keepalive=$(echo "${_client_output}" | sed -n 4p)

		client::update "${_client_peer}" "${_client_active}" "${_client_privkey}" "${_client_preshared}" "${_client_keepalive}" "${_client_fullname}" "${_client_group}"

                tui::infobox "Update client" "Peer ${_client_peer} was updated" "2"

                return 0
        else
                return 1
        fi
}

tui::client::activate() {
        local _client_list
        local _client_peer
	local _peer

        _client_list=$(client::list "${ETCPATH}/wg-shadmin-clients.conf" "0")

        while true
        do
                _client_peer=$(echo ${_client_list} | xargs ${DIALOG_BIN} --backtitle "Wireguard administration tool" \
                                --title "Enable/disable clients" \
                                --checklist "Select one or more peers:" 15 60 10 \
                                3>&1 1>&2 2>&3)

		if [ "$?" -eq "1" ]; then
			return 1
		fi

		break;
        done

	util::config::set "${ETCPATH}/wg-shadmin-clients.conf" "peer.*_active" "NO"

	for _peer in $(echo ${_client_peer})
	do
		util::config::set "${ETCPATH}/wg-shadmin-clients.conf" "${_peer}_active" "YES"
	done

	tui::infobox "Enable/disable clients" "Changes were saved" "2"

        return 0
}

tui::client::generate::file() {
	local _client_list
	local _client_peer
	local _client_active

	_client_list=$(client::list "${ETCPATH}/wg-shadmin-clients.conf")

        while true
        do
                _client_peer=$(echo ${_client_list} | xargs ${DIALOG_BIN} --backtitle "Wireguard administration tool" \
                                --title "Generate client file" \
                                --radiolist "Select one peer:" 15 60 10 \
                                3>&1 1>&2 2>&3)

		if [ "$?" -eq "1" ]; then
			return 1
		fi

                if [ -z ${_client_peer} ]; then
                        tui::infobox "Generate client file" "You must select a peer" "2"
                else
                        break;
                fi
        done

	_client_active=$(grep -w ${_client_peer}_active= ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)

	if [ "${_client_active}" = "YES" ]; then
		client::generate::file "${_client_peer}" "${ETCPATH}/wg-shadmin-clients.conf"
		tui::infobox "Generate client file" "Configuration file of ${_client_peer} was generated" "2"
		return 0
	else
		tui::infobox "Generate client file" "Configuration file was not generated because ${_client_peer} is not enabled." "3"
		return 1
	fi
}

tui::client::generate::files() {
	local _client_list
	local _client_peer
	local _client_active
	local _peer

	util::remove::config::files

	_client_list=$(grep "peer.*_ip=" "${ETCPATH}/wg-shadmin-clients.conf" | cut -d '_' -f1)

	for _peer in ${_client_list}
	do
		_client_active=$(grep -w ${_peer}_active= ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)

		if [ "${_client_active}" = "YES" ]; then
			client::generate::file "${_peer}" "${ETCPATH}/wg-shadmin-clients.conf"
		fi
	done

	tui::infobox "Generate client files" "Configuration files of peers-enabled were generated" "2"
	return 0
}

tui::client::generate::qrcode() {
	local _client_list
	local _client_peer
	local _client_active

	_client_list=$(client::list "${ETCPATH}/wg-shadmin-clients.conf")

	while true
	do
		_client_peer=$(echo ${_client_list} | xargs ${DIALOG_BIN} --backtitle "Wireguard administration tool" \
			--title "Generate qrcode client file" \
			--radiolist "Select one peer:" 15 60 10 \
		3>&1 1>&2 2>&3)

		if [ "$?" -eq "1" ]; then
			return 1
		fi

		if [ -z ${_client_peer} ]; then
			tui::infobox "Generate client file" "You must select a peer" "2"
		else
			break;
                fi
	done

	_client_active=$(grep -w ${_client_peer}_active= ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)

	if [ "${_client_active}" = "YES" ]; then
		client::generate::file "${_client_peer}" "${ETCPATH}/wg-shadmin-clients.conf"
		client::generate::qrcode "${ETCPATH}/peers/$(grep -w ${_client_peer}_group= ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)/$(grep -w ${_client_peer}_ip= ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2).conf"

		util::pause

	        tui::infobox "Generate qrcode client file" "QRCode of ${_client_peer} was generated" "2"
		return 0
	else
		tui::infobox "Generate qrcode client file" "QRCode was not generated because ${_client_peer} is not enable." "3"
		return 1
	fi
}

tui::client::view() {
	local _client_list
	local _client_peer
	local _flag

	_client_list=$(client::list "${ETCPATH}/wg-shadmin-clients.conf")

	while true
	do
		_client_peer=$(echo ${_client_list} | xargs ${DIALOG_BIN} --backtitle "Wireguard administration tool" \
                                --title "View client file" \
                                --radiolist "Select one peer:" 15 60 10 \
                                3>&1 1>&2 2>&3)

                if [ "$?" -eq "1" ]; then
                        break;
		else
			_client_ip=$(grep "${_client_peer}_ip=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_active=$(grep "${_client_peer}_active=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_privkey=$(grep "${_client_peer}_privkey=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_preshared=$(grep "${_client_peer}_preshared=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_keepalive=$(grep "${_client_peer}_keepalive=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_fullname=$(grep "${_client_peer}_fullname=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)
			_client_group=$(grep "${_client_peer}_group=" ${ETCPATH}/wg-shadmin-clients.conf | cut -d '"' -f2)

			if [ "${_client_preshared}" = "NO" ]; then
				_flag=2
			else
				_flag=3
			fi

			_client_output=$(${DIALOG_BIN} --ok-label "View" \
				--cancel-label "Back" \
				--insecure "$@" \
				--backtitle "Wireguard administration tool" \
				--title "View client" \
				--mixedform "Client configuration" 15 60 0 \
					"Client IP:" 1 1 "${_client_ip}" 1 25 16 15 2 \
					"Client active:" 2 1 "${_client_active}" 2 25 16 15 2 \
					"Client fullname:" 3 1 "${_client_fullname}" 3 25 23 22 2 \
					"Client keepalive:" 4 1 "${_client_keepalive}" 4 25 5 4 2 \
					"Client privkey:" 5 1 "${_client_privkey}" 5 25 23 22 3 \
					"Client preshared:" 6 1 "${_client_preshared}" 6 25 23 22 ${_flag} \
					"Client group:" 7 1 "${_client_group}" 7 25 23 22 2 \
			3>&1 1>&2 2>&3)

			if [ "$?" -eq "0" ]; then
				if [ "${_client_active}" = "YES" ]; then
					client::generate::file "${_client_peer}" "${ETCPATH}/wg-shadmin-clients.conf"
					less "${ETCPATH}/peers/$(grep -w ${_client_peer}_group "${ETCPATH}/wg-shadmin-clients.conf" | cut -d '"' -f2)/$(grep -w ${_client_peer}_ip "${ETCPATH}/wg-shadmin-clients.conf" | cut -d '"' -f2).conf"
				else
					tui::infobox "View client" "Can not view this file because ${_client_peer} is not enabled" "2"
				fi
			fi
                fi
        done

        return 0
}

tui::yesno() {
        local _title="$1"
        local _message="$2"

        ${DIALOG_BIN} --backtitle "Wireguard administration tool" --title "${_title}" --yesno "${_message}" 7 40 3>&1 1>&2 2>&3
}

tui::message() {
        local _title="$1"
        local _message="$2"

        ${DIALOG_BIN} --backtitle "Wireguard administration tool" --title "${_title}" --msgbox  "${_message}" 5 50
}

tui::infobox() {
        local _title="$1"
        local _message="$2"
	local _seconds="$3"

        ${DIALOG_BIN} --backtitle "Wireguard administration tool" --title "${_title}" --infobox  "${_message}" 5 50
        sleep ${_seconds}
}
